[[source]]
name = "pypi"
url = "https://pypi.org/simple"
verify_ssl = true

[dev-packages]
black = ">=19.10b0"
pytest = "~=6.0.0"
pytest-django = "~=4.1"
pytest-cov = "~=2.7"
pytest-datadir = "~=1.3"
pytest-mypy = "~=0.4"
hypothesis = {extras = ["django"],version = "~=4.34"}
codecov = "*"
pysnooper = "*"
tqdm = "~=4.40"
python-levenshtein = "*"
django-debug-toolbar = "~=2.2"
isort = {extras = ["pyproject"],version = "*"}
toml = "~=0.10"

[packages]
colorama = "~=0.4"
coverage = "~=4.5"
cree-sro-syllabics = ">=2020.6.23"
pytz = "==2019.2"
Django = "~=2.2"
creedictionary = {path = "./CreeDictionary",editable = true} # needed to install and use database manager
typing-extensions = "~=3.7"
attrs = "~=19.1"
django-js-reverse = "~=0.9"
sortedcontainers = {file = "https://eddieantonio.keybase.pub/sortedcontainers-2.1.0.tar.gz"}
secure = "*"
snowballstemmer = "*"
dawg = "~=0.8"
gunicorn = "*"
environs = {extras = ["django"], version = "*"}
hfst-optimized-lookup = "*"
mypy = ">=0.800"

[scripts]
# look stuff up
analyze = "hfst-optimized-lookup CreeDictionary/res/fst/crk-descriptive-analyzer.hfstol"
generate = "hfst-optimized-lookup CreeDictionary/res/fst/crk-normative-generator.hfstol"
# unit tests
test = "pytest --mypy CreeDictionary/"
# run dev server
dev = "python CreeDictionary/manage.py runserver"
# format
format = "black CreeDictionary"
# `import-xml` removes the database and builds a new one from the start,
# it shouldn't be used because we are waiting for a well structured new database
# so that we can move to a more continuous workflow where manual database modification can be persisted
# example usage: pipenv run import-xml CreeDictionary/res/dictionaries/ --multi-process 2
import-xml = "sh ./libexec/import.sh"
# do this after you change the list of words in res/test_db_words.txt to rebuild test_db.sqlite3
# Supply `-m|--multi-processing N` to speed up
# Extra arguments will be passed to subcommand `build-test-db` of `manage-db`, use `manage-db build-test-db -h` to see
# detailed help
# It takes about half a minute with -m 2
# example usage: `pipenv run build-test-db -m 2`
build-test-db = "sh ./libexec/build_test_db.sh"
# warning: do not use these.
# eventually we will scrap them and use a migration based work flow to preserve database changes AFTER a new
# , well structured database is ready.
push-db = 'rsync --progress CreeDictionary/db.sqlite3 $SAPIR_USER@sapir.artsrn.ualberta.ca:/opt/cree-intelligent-dictionary/CreeDictionary/db.sqlite3'
pull-db = 'rsync --progress $SAPIR_USER@sapir.artsrn.ualberta.ca:/opt/cree-intelligent-dictionary/CreeDictionary/db.sqlite3 CreeDictionary/db.sqlite3'
# Utitlities
collect-static = "python CreeDictionary/manage.py collectstatic --no-input"
gunicorn-locally = "gunicorn CreeDictionary.wsgi"

[requires]
python_version = "3.9"

[pipenv]
# this allows "black>=19.10b0" to work
allow_prereleases = true
